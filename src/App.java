
import java.awt.TextArea;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileFilter;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author ubuntu
 */
public class App extends javax.swing.JFrame {

    /**
     * Creates new form App
     */
    private File[] selectedFiles;

    private List<Thread> processes;

    public App() {
        this.processes = new ArrayList();
        initComponents();
        DefaultListModel emptyModel = new DefaultListModel();
        this.jList1.setModel(emptyModel);
        this.jList2.setModel(emptyModel);

        int t = this.jTabbedPane1.getTabCount();
        for (int v = 1; v < t; v++) {
            this.jTabbedPane1.removeTabAt(v);
        }

        // this.updateComponents();
    }

    private void updateContents() {

        this.jList1.removeAll();
        this.jList2.removeAll();

        this.jList1.setModel(new DefaultListModel<>());
        this.jList2.setModel(new DefaultListModel<>());

        int t = this.jTabbedPane1.getTabCount();
        for (int v = 1; v < t; v++) {
            this.jTabbedPane1.removeTabAt(v);
        }

    }

    private void toggleButtons() {
        boolean enabled = (this.selectedFiles == null);
        this.convertBtn.setEnabled(!enabled);
    }

    private void updateComponents() {

        if (this.selectedFiles == null) {
            DefaultListModel emptyModel = new DefaultListModel();
            this.jList1.setModel(emptyModel);
            this.jList2.setModel(emptyModel);

            int t = this.jTabbedPane1.getTabCount();
            for (int v = 1; v < t; v++) {
                this.jTabbedPane1.removeTabAt(v);
            }

            return;
        }

        this.jFrame1.setVisible(true);
        this.extractMediaInformation(this.selectedFiles);

      

        DefaultListModel model = new DefaultListModel();
        for (File f : this.selectedFiles) {
            model.addElement(new jobModel(f));
        }

        this.jList1.setModel(model);

//        new FileFilter() {
//            @Override
//            public boolean accept(File f) {
//                return f.isDirectory() | 
//                        f.getName().endsWith(".mp4")|
//                        f.getName().endsWith(".webm")|
//                        f.getName().endsWith(".3gp");
//            }
//
//            @Override
//            public String getDescription() {
//                return "Movie Files";
//            }
//        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jFrame1 = new javax.swing.JFrame();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        addBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        convertBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jFileChooser1.setFileFilter( new FileFilter() {
            @Override
            public boolean accept(File f) {
                return f.isDirectory() |
                f.getName().endsWith(".mp4")|
                f.getName().endsWith(".webm")|
                f.getName().endsWith(".3gp");
            }

            @Override
            public String getDescription() {
                return "Movie Files";
            }
        });
        jFileChooser1.setMultiSelectionEnabled(true);

        jDialog1.setBackground(new java.awt.Color(255, 255, 255));
        jDialog1.setFocusCycleRoot(false);
        jDialog1.setLocation(new java.awt.Point(400, 400));
        jDialog1.setLocationByPlatform(true);
        jDialog1.setModal(true);
        jDialog1.setType(java.awt.Window.Type.UTILITY);
        jDialog1.getContentPane().setLayout(new javax.swing.OverlayLayout(jDialog1.getContentPane()));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Reading Meta Data");
        jLabel4.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jDialog1.getContentPane().add(jLabel4);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Loading_icon.gif"))); // NOI18N
        jDialog1.getContentPane().add(jLabel3);
        jLabel3.getAccessibleContext().setAccessibleParent(this);

        jFrame1.setResizable(false);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/res/Loading_icon.gif"))); // NOI18N
        jLabel5.setText("Loading Metadata");
        jLabel5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel5.setOpaque(true);

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "C://Users/dell/Movies/Age Daiywaya.mp4" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        addBtn.setText("add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("remove");

        jPanel1.setLayout(new java.awt.CardLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane2, "card2");

        jTabbedPane1.addTab("System Log", jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 692, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 153, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Age Daiywaya", jPanel2);

        convertBtn.setText("Convert");
        convertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertBtnActionPerformed(evt);
            }
        });

        jList2.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "426x260   400kbps", "642x360   800kbps", "854x480   1200kbps", "1280x720 2400kbps" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList2);

        jLabel1.setLabelFor(jList1);
        jLabel1.setText("File List");

        jLabel2.setText("Available Profiles");

        jTextArea2.setBackground(new java.awt.Color(238, 238, 238));
        jTextArea2.setColumns(20);
        jTextArea2.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuItem1.setText("Preference");
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(addBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(convertBtn)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 436, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(jScrollPane3))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(convertBtn)
                    .addComponent(addBtn)
                    .addComponent(removeBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed

        int status = this.jFileChooser1.showDialog(this, "Select");
        if (status == 0) {
            this.selectedFiles = this.jFileChooser1.getSelectedFiles();

            System.out.println(this.selectedFiles.length);
            this.updateComponents();

//            this.jDialog1.show();

        }
    }//GEN-LAST:event_addBtnActionPerformed


    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged


    }//GEN-LAST:event_jList1ValueChanged

    private void convertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertBtnActionPerformed

        try {

            ProcessBuilder builder = new ProcessBuilder(Arrays.asList(new String[]{"ffmpeg", "-i", "/home/ubuntu/Desktop/aaa.mp4"}));
            Process p = builder.start();//Runtime.getRuntime().exec(new String[]{"/home/ubuntu/Downloads/ffmpeg-git-64bit-static (1)/ffmpeg-git-20180124-64bit-static/ffmpeg"," -i /home/ubuntu/Desktop/aaa.mp4"});
            // p.waitFor();

            new Thread() {
                public void run() {

                    Scanner sc = new Scanner(p.getErrorStream());

                    while (sc.hasNext()) {

                        System.out.println(sc.nextLine());
                    }

                    // Find duration
//        Pattern durPattern = Pattern.compile("(?<=Duration: )[^,]*");
//        String dur = sc.findWithinHorizon(durPattern, 0);
//        if (dur == null)
//          throw new RuntimeException("Could not parse duration.");
//        String[] hms = dur.split(":");
//        double totalSecs = Integer.parseInt(hms[0]) * 3600
//                         + Integer.parseInt(hms[1]) *   60
//                         + Double.parseDouble(hms[2]);
//        System.out.println("Total duration: " + totalSecs + " seconds.");
//
//        // Find time as long as possible.
//        Pattern timePattern = Pattern.compile("(?<=time=)[\\d.]*");
//        String match;
//        while (null != (match = sc.findWithinHorizon(timePattern, 0))) {
//          double progress = Double.parseDouble(match) / totalSecs;
//          System.out.printf("Progress: %.2f%%%n", progress * 100);
//        }
                }
            }.start();

//           StringBuilder output = new StringBuilder();
//            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
//            String line;                       
//            while ((line = reader.readLine())!= null) {
//                    output.append(line).append("\n");
//            }
//            
//            
//            System.out.println(output + " the output");
        } catch (IOException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (InterruptedException ex) {
//            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
//        }
        }
    }//GEN-LAST:event_convertBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    
          
    
    private static App app;
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            App.app = new App();        
            App.app.setVisible(true);

            //  System.getProperties().list(System.out);
            //     System.out.println(System.getProperty("os.name"));
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton convertBtn;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton removeBtn;
    // End of variables declaration//GEN-END:variables

    protected class jobModel {

        private final String objectName;
        private final File objectFile;

        public jobModel(File objectFile) {
            this.objectName = objectFile.getPath();
            this.objectFile = objectFile;
        }

        public String getObjectName() {
            return objectName;
        }

        public File getObjectFile() {
            return objectFile;
        }

        @Override
        public String toString() {
            return this.objectName;
        }

    }
    
    String mediaInformation[];

    private synchronized void extractMediaInformation(File[] files) {

        if (files == null || files.length < 1) {
        //    System.out.println(files);
            return;
        }
         mediaInformation = new String[files.length];
        try {
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {

                        int index = 0;

                        for (File f : files) {
                            
                          //  System.out.println(f.getPath());
                            ProcessBuilder pBuilder = new ProcessBuilder(Arrays.asList(new String[]{App.this.getFFMPEGExecer(), "-i" , f.getPath()}));
                            Process p = pBuilder.start();

                            Scanner s = new Scanner(p.getErrorStream());
                            String fileFName = f.getName();
                            String fileName = fileFName.substring(0,fileFName.indexOf("."));
                            int fileNameLength = fileName.length();
                            int subsLength = fileNameLength > 11 ? 11 : fileNameLength; 
                            
                            String ret =fileName.toUpperCase().substring(0, subsLength) + "\n";
                           
                            while (s.hasNext()) {
                                String st = s.nextLine();
                                //System.out.println(st);
                                ret += (st + "\n");
                            }

                            
                          
                          
                            mediaInformation[index++] = ret;
                          //  System.out.println(mediaInformation[index-1]);

                        }
                        
                        
                        App.onMediaInformationExtracted(mediaInformation);

                    } catch (IOException ex) {
                        Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            });

            this.processes.add(t);
            t.start();

        } catch (Exception ex) {

            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error Occured", JOptionPane.ERROR_MESSAGE);
        }

        
    }

    private String getFFMPEGExecer() {
        String ffmpegExec;
        switch (System.getProperty("os.name").toLowerCase()) {
            case "windows":
                String arch = System.getProperty("os.arch").contains("64") ? "/res/win/win64/" : "/res/win/win32/";
                ffmpegExec = this.getClass().getResource(arch + "/ffmpeg/bin/ffmpeg.exe").getPath();
                break;
            case "mac":
                ffmpegExec = this.getClass().getResource("/res/mac/ffmpeg/ffmpeg").getPath();
                break;
            default:
                ffmpegExec = "ffmpeg";
                break;
        }
        return ffmpegExec;
    }
    
    
    
    private static void onMediaInformationExtracted(String[] mediaInformation){
    
      for (String s : mediaInformation) {
            
          //  System.out.println(s);

            JPanel p = new JPanel();
            p.setLayout(new java.awt.CardLayout());
            TextArea ta = new TextArea();
            ta.setEditable(false);
            String metaData = s.substring(s.indexOf("Metadata"));
            ta.append(metaData);
            p.add(ta);
           
           
            String title = s.substring(0, s.indexOf("\n"));
            
            app.jTabbedPane1.addTab(title, p);
            app.jFrame1.setVisible(false);

        }
    }
    
    
    
    
    
    private class ProfileManager {
    
        
        private List<Profile> profiles;
        
        
        public ProfileManager(){
        
        
        }
        
        
        private void loadDefaultProfiles(){
        
        
        }
        
        
        private List<Profile> getSuitableProfiles(){
        
            return null;
        }
    
    }
    
    
    private class Profile{
    
        private double bitRate;
        private double res;
    
    }
    
  
}
